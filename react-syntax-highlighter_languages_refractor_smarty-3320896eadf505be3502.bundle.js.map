{"version":3,"file":"react-syntax-highlighter_languages_refractor_smarty-3320896eadf505be3502.bundle.js","mappings":"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","sources":["webpack://ardos-web/./node_modules/refractor/lang/markup-templating.js","webpack://ardos-web/./node_modules/refractor/lang/smarty.js"],"sourcesContent":["'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            ) {\n              ++i\n            } // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = smarty\nsmarty.displayName = 'smarty'\nsmarty.aliases = []\nfunction smarty(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.smarty = {\n      comment: {\n        pattern: /^\\{\\*[\\s\\S]*?\\*\\}/,\n        greedy: true\n      },\n      'embedded-php': {\n        pattern: /^\\{php\\}[\\s\\S]*?\\{\\/php\\}/,\n        greedy: true,\n        inside: {\n          smarty: {\n            pattern: /^\\{php\\}|\\{\\/php\\}$/,\n            inside: null // see below\n          },\n          php: {\n            pattern: /[\\s\\S]+/,\n            alias: 'language-php',\n            inside: Prism.languages.php\n          }\n        }\n      },\n      string: [\n        {\n          pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n          greedy: true,\n          inside: {\n            interpolation: {\n              pattern: /\\{[^{}]*\\}|`[^`]*`/,\n              inside: {\n                'interpolation-punctuation': {\n                  pattern: /^[{`]|[`}]$/,\n                  alias: 'punctuation'\n                },\n                expression: {\n                  pattern: /[\\s\\S]+/,\n                  inside: null // see below\n                }\n              }\n            },\n            variable: /\\$\\w+/\n          }\n        },\n        {\n          pattern: /'(?:\\\\.|[^'\\\\\\r\\n])*'/,\n          greedy: true\n        }\n      ],\n      keyword: {\n        pattern: /(^\\{\\/?)[a-z_]\\w*\\b(?!\\()/i,\n        lookbehind: true,\n        greedy: true\n      },\n      delimiter: {\n        pattern: /^\\{\\/?|\\}$/,\n        greedy: true,\n        alias: 'punctuation'\n      },\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      variable: [\n        /\\$(?!\\d)\\w+/,\n        /#(?!\\d)\\w+#/,\n        {\n          pattern: /(\\.|->|\\w\\s*=)(?!\\d)\\w+\\b(?!\\()/,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n          lookbehind: true\n        }\n      ],\n      function: {\n        pattern: /(\\|\\s*)@?[a-z_]\\w*|\\b[a-z_]\\w*(?=\\()/i,\n        lookbehind: true\n      },\n      'attr-name': /\\b[a-z_]\\w*(?=\\s*=)/i,\n      boolean: /\\b(?:false|no|off|on|true|yes)\\b/,\n      punctuation: /[\\[\\](){}.,:`]|->/,\n      operator: [\n        /[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,\n        /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,\n        /\\b(?:and|eq|gt?e|gt|lt?e|lt|mod|neq?|not|or)\\b/\n      ]\n    }\n    Prism.languages.smarty['embedded-php'].inside.smarty.inside =\n      Prism.languages.smarty\n    Prism.languages.smarty.string[0].inside.interpolation.inside.expression.inside =\n      Prism.languages.smarty\n    var string = /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/\n    var smartyPattern = RegExp(\n      // comments\n      /\\{\\*[\\s\\S]*?\\*\\}/.source +\n        '|' + // php tags\n        /\\{php\\}[\\s\\S]*?\\{\\/php\\}/.source +\n        '|' + // smarty blocks\n        /\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>)*\\})*\\})*\\}/.source.replace(\n          /<str>/g,\n          function () {\n            return string.source\n          }\n        ),\n      'g'\n    ) // Tokenize all inline Smarty expressions\n    Prism.hooks.add('before-tokenize', function (env) {\n      var smartyLiteralStart = '{literal}'\n      var smartyLiteralEnd = '{/literal}'\n      var smartyLiteralMode = false\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'smarty',\n        smartyPattern,\n        function (match) {\n          // Smarty tags inside {literal} block are ignored\n          if (match === smartyLiteralEnd) {\n            smartyLiteralMode = false\n          }\n          if (!smartyLiteralMode) {\n            if (match === smartyLiteralStart) {\n              smartyLiteralMode = true\n            }\n            return true\n          }\n          return false\n        }\n      )\n    }) // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty')\n    })\n  })(Prism)\n}\n"],"names":["module","markupTemplating","Prism","getPlaceholder","language","index","env","placeholderPattern","replaceFilter","tokenStack","match","placeholder","j","keys","walkTokens","tokens","token","k","t","s","before","middle","after","replacement","refractorMarkupTemplating","smarty","string","smartyPattern","smartyLiteralStart","smartyLiteralEnd","smartyLiteralMode"],"sourceRoot":""}