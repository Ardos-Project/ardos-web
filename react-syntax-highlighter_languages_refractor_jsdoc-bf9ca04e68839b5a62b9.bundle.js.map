{"version":3,"file":"react-syntax-highlighter_languages_refractor_jsdoc-bf9ca04e68839b5a62b9.bundle.js","mappings":"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","sources":["webpack://ardos-web/./node_modules/refractor/lang/javadoclike.js","webpack://ardos-web/./node_modules/refractor/lang/jsdoc.js","webpack://ardos-web/./node_modules/refractor/lang/typescript.js"],"sourcesContent":["'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern:\n          /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n","'use strict'\nvar refractorJavadoclike = require('./javadoclike.js')\nvar refractorTypescript = require('./typescript.js')\nmodule.exports = jsdoc\njsdoc.displayName = 'jsdoc'\njsdoc.aliases = []\nfunction jsdoc(Prism) {\n  Prism.register(refractorJavadoclike)\n  Prism.register(refractorTypescript)\n  ;(function (Prism) {\n    var javascript = Prism.languages.javascript\n    var type = /\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})+\\}/.source\n    var parameterPrefix =\n      '(@(?:arg|argument|param|property)\\\\s+(?:' + type + '\\\\s+)?)'\n    Prism.languages.jsdoc = Prism.languages.extend('javadoclike', {\n      parameter: {\n        // @param {string} foo - foo bar\n        pattern: RegExp(\n          parameterPrefix + /(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?=\\s|$)/.source\n        ),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    })\n    Prism.languages.insertBefore('jsdoc', 'keyword', {\n      'optional-parameter': {\n        // @param {string} [baz.foo=\"bar\"] foo bar\n        pattern: RegExp(\n          parameterPrefix +\n            /\\[(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?:=[^[\\]]+)?\\](?=\\s|$)/.source\n        ),\n        lookbehind: true,\n        inside: {\n          parameter: {\n            pattern: /(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,\n            lookbehind: true,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          code: {\n            pattern: /(=)[\\s\\S]*(?=\\]$)/,\n            lookbehind: true,\n            inside: javascript,\n            alias: 'language-javascript'\n          },\n          punctuation: /[=[\\]]/\n        }\n      },\n      'class-name': [\n        {\n          pattern: RegExp(\n            /(@(?:augments|class|extends|interface|memberof!?|template|this|typedef)\\s+(?:<TYPE>\\s+)?)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/.source.replace(\n              /<TYPE>/g,\n              function () {\n                return type\n              }\n            )\n          ),\n          lookbehind: true,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        {\n          pattern: RegExp('(@[a-z]+\\\\s+)' + type),\n          lookbehind: true,\n          inside: {\n            string: javascript.string,\n            number: javascript.number,\n            boolean: javascript.boolean,\n            keyword: Prism.languages.typescript.keyword,\n            operator: /=>|\\.\\.\\.|[&|?:*]/,\n            punctuation: /[.,;=<>{}()[\\]]/\n          }\n        }\n      ],\n      example: {\n        pattern:\n          /(@example\\s+(?!\\s))(?:[^@\\s]|\\s+(?!\\s))+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,\n        lookbehind: true,\n        inside: {\n          code: {\n            pattern: /^([\\t ]*(?:\\*\\s*)?)\\S.*$/m,\n            lookbehind: true,\n            inside: javascript,\n            alias: 'language-javascript'\n          }\n        }\n      }\n    })\n    Prism.languages.javadoclike.addSupport('javascript', Prism.languages.jsdoc)\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = typescript\ntypescript.displayName = 'typescript'\ntypescript.aliases = ['ts']\nfunction typescript(Prism) {\n  ;(function (Prism) {\n    Prism.languages.typescript = Prism.languages.extend('javascript', {\n      'class-name': {\n        pattern:\n          /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n      },\n      builtin:\n        /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n    }) // The keywords TypeScript adds to JavaScript\n    Prism.languages.typescript.keyword.push(\n      /\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n      /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n      /\\btype\\b(?=\\s*(?:[\\{*]|$))/\n    ) // doesn't work with TS because TS is too complex\n    delete Prism.languages.typescript['parameter']\n    delete Prism.languages.typescript['literal-property'] // a version of typescript specifically for highlighting types\n    var typeInside = Prism.languages.extend('typescript', {})\n    delete typeInside['class-name']\n    Prism.languages.typescript['class-name'].inside = typeInside\n    Prism.languages.insertBefore('typescript', 'function', {\n      decorator: {\n        pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n        inside: {\n          at: {\n            pattern: /^@/,\n            alias: 'operator'\n          },\n          function: /^[\\s\\S]+/\n        }\n      },\n      'generic-function': {\n        // e.g. foo<T extends \"bar\" | \"baz\">( ...\n        pattern:\n          /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n        greedy: true,\n        inside: {\n          function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            // everything after the first <\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      }\n    })\n    Prism.languages.ts = Prism.languages.typescript\n  })(Prism)\n}\n"],"names":["module","javadoclike","Prism","javaDocLike","docCommentSupport","lang","callback","tokenName","grammar","token","definition","i","l","addSupport","languages","docLanguage","pattern","refractorJavadoclike","refractorTypescript","jsdoc","javascript","type","parameterPrefix","typescript","typeInside"],"sourceRoot":""}