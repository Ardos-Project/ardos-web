{"version":3,"file":"react-syntax-highlighter_languages_refractor_latte-c21efd22bdb93694b163.bundle.js","mappings":"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","sources":["webpack://ardos-web/./node_modules/refractor/lang/latte.js","webpack://ardos-web/./node_modules/refractor/lang/markup-templating.js","webpack://ardos-web/./node_modules/refractor/lang/php.js"],"sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nvar refractorPhp = require('./php.js')\nmodule.exports = latte\nlatte.displayName = 'latte'\nlatte.aliases = []\nfunction latte(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  Prism.register(refractorPhp)\n  ;(function (Prism) {\n    Prism.languages.latte = {\n      comment: /^\\{\\*[\\s\\S]*/,\n      'latte-tag': {\n        // https://latte.nette.org/en/tags\n        pattern: /(^\\{(?:\\/(?=[a-z]))?)(?:[=_]|[a-z]\\w*\\b(?!\\())/i,\n        lookbehind: true,\n        alias: 'important'\n      },\n      delimiter: {\n        pattern: /^\\{\\/?|\\}$/,\n        alias: 'punctuation'\n      },\n      php: {\n        pattern: /\\S(?:[\\s\\S]*\\S)?/,\n        alias: 'language-php',\n        inside: Prism.languages.php\n      }\n    }\n    var markupLatte = Prism.languages.extend('markup', {})\n    Prism.languages.insertBefore(\n      'inside',\n      'attr-value',\n      {\n        'n-attr': {\n          pattern: /n:[\\w-]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+))?/,\n          inside: {\n            'attr-name': {\n              pattern: /^[^\\s=]+/,\n              alias: 'important'\n            },\n            'attr-value': {\n              pattern: /=[\\s\\S]+/,\n              inside: {\n                punctuation: [\n                  /^=/,\n                  {\n                    pattern: /^(\\s*)[\"']|[\"']$/,\n                    lookbehind: true\n                  }\n                ],\n                php: {\n                  pattern: /\\S(?:[\\s\\S]*\\S)?/,\n                  inside: Prism.languages.php\n                }\n              }\n            }\n          }\n        }\n      },\n      markupLatte.tag\n    )\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (env.language !== 'latte') {\n        return\n      }\n      var lattePattern =\n        /\\{\\*[\\s\\S]*?\\*\\}|\\{[^'\"\\s{}*](?:[^\"'/{}]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\}/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'latte',\n        lattePattern\n      )\n      env.grammar = markupLatte\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'latte')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            ) {\n              ++i\n            } // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = php\nphp.displayName = 'php'\nphp.aliases = []\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   * Rewritten by Tom Pavelec\n   *\n   * Supports PHP 5.3 - 8.0\n   */\n  ;(function (Prism) {\n    var comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/\n    var constant = [\n      {\n        pattern: /\\b(?:false|true)\\b/i,\n        alias: 'boolean'\n      },\n      {\n        pattern: /(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,\n        greedy: true,\n        lookbehind: true\n      },\n      {\n        pattern: /(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,\n        greedy: true,\n        lookbehind: true\n      },\n      /\\b(?:null)\\b/i,\n      /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/\n    ]\n    var number =\n      /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i\n    var operator =\n      /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/\n    var punctuation = /[{}\\[\\](),:;]/\n    Prism.languages.php = {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      },\n      comment: comment,\n      variable: /\\$+(?:\\w+\\b|(?=\\{))/,\n      package: {\n        pattern:\n          /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      'class-name-definition': {\n        pattern: /(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      'function-definition': {\n        pattern: /(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      },\n      keyword: [\n        {\n          pattern:\n            /(\\(\\s*)\\b(?:array|bool|boolean|float|int|integer|object|string)\\b(?=\\s*\\))/i,\n          alias: 'type-casting',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /([(,?]\\s*)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string)\\b(?=\\s*\\$)/i,\n          alias: 'type-hint',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string|void)\\b/i,\n          alias: 'return-type',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /\\b(?:array(?!\\s*\\()|bool|float|int|iterable|mixed|object|string|void)\\b/i,\n          alias: 'type-declaration',\n          greedy: true\n        },\n        {\n          pattern: /(\\|\\s*)(?:false|null)\\b|\\b(?:false|null)(?=\\s*\\|)/i,\n          alias: 'type-declaration',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n          alias: 'static-context',\n          greedy: true\n        },\n        {\n          // yield from\n          pattern: /(\\byield\\s+)from\\b/i,\n          lookbehind: true\n        }, // `class` is always a keyword unlike other keywords\n        /\\bclass\\b/i,\n        {\n          // https://www.php.net/manual/en/reserved.keywords.php\n          //\n          // keywords cannot be preceded by \"->\"\n          // the complex lookbehind means `(?<!(?:->|::)\\s*)`\n          pattern:\n            /((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\\b/i,\n          lookbehind: true\n        }\n      ],\n      'argument-name': {\n        pattern: /([(,]\\s+)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n        lookbehind: true\n      },\n      'class-name': [\n        {\n          pattern:\n            /(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n          greedy: true\n        },\n        {\n          pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern:\n            /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n          alias: 'type-declaration',\n          greedy: true\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n          alias: ['class-name-fully-qualified', 'type-declaration'],\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n          alias: 'static-context',\n          greedy: true\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n          alias: ['class-name-fully-qualified', 'static-context'],\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n          alias: 'type-hint',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n          alias: ['class-name-fully-qualified', 'type-hint'],\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          alias: 'return-type',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n          alias: ['class-name-fully-qualified', 'return-type'],\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        }\n      ],\n      constant: constant,\n      function: {\n        pattern: /(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      property: {\n        pattern: /(->\\s*)\\w+/,\n        lookbehind: true\n      },\n      number: number,\n      operator: operator,\n      punctuation: punctuation\n    }\n    var string_interpolation = {\n      pattern:\n        /\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,\n      lookbehind: true,\n      inside: Prism.languages.php\n    }\n    var string = [\n      {\n        pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n        alias: 'nowdoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<'?|[';]$/\n            }\n          }\n        }\n      },\n      {\n        pattern:\n          /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n        alias: 'heredoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<\"?|[\";]$/\n            }\n          },\n          interpolation: string_interpolation\n        }\n      },\n      {\n        pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n        alias: 'backtick-quoted-string',\n        greedy: true\n      },\n      {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        alias: 'single-quoted-string',\n        greedy: true\n      },\n      {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        alias: 'double-quoted-string',\n        greedy: true,\n        inside: {\n          interpolation: string_interpolation\n        }\n      }\n    ]\n    Prism.languages.insertBefore('php', 'variable', {\n      string: string,\n      attribute: {\n        pattern:\n          /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n        greedy: true,\n        inside: {\n          'attribute-content': {\n            pattern: /^(#\\[)[\\s\\S]+(?=\\]$)/,\n            lookbehind: true,\n            // inside can appear subset of php\n            inside: {\n              comment: comment,\n              string: string,\n              'attribute-class-name': [\n                {\n                  pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                  alias: 'class-name',\n                  greedy: true,\n                  lookbehind: true\n                },\n                {\n                  pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n                  alias: ['class-name', 'class-name-fully-qualified'],\n                  greedy: true,\n                  lookbehind: true,\n                  inside: {\n                    punctuation: /\\\\/\n                  }\n                }\n              ],\n              constant: constant,\n              number: number,\n              operator: operator,\n              punctuation: punctuation\n            }\n          },\n          delimiter: {\n            pattern: /^#\\[|\\]$/,\n            alias: 'punctuation'\n          }\n        }\n      }\n    })\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/<\\?/.test(env.code)) {\n        return\n      }\n      var phpPattern =\n        /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'php',\n        phpPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php')\n    })\n  })(Prism)\n}\n"],"names":["refractorMarkupTemplating","refractorPhp","module","latte","Prism","markupLatte","env","lattePattern","markupTemplating","getPlaceholder","language","index","placeholderPattern","replaceFilter","tokenStack","match","i","placeholder","j","keys","walkTokens","tokens","token","k","t","s","before","middle","after","replacement","php","comment","constant","number","operator","punctuation","string_interpolation","string","phpPattern"],"sourceRoot":""}