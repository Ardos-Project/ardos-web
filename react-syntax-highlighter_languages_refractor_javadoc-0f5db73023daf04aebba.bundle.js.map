{"version":3,"file":"react-syntax-highlighter_languages_refractor_javadoc-0f5db73023daf04aebba.bundle.js","mappings":"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","sources":["webpack://ardos-web/./node_modules/refractor/lang/java.js","webpack://ardos-web/./node_modules/refractor/lang/javadoc.js","webpack://ardos-web/./node_modules/refractor/lang/javadoclike.js"],"sourcesContent":["'use strict'\n\nmodule.exports = java\njava.displayName = 'java'\njava.aliases = []\nfunction java(Prism) {\n  ;(function (Prism) {\n    var keywords =\n      /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/ // full package (optional) + parent classes (optional)\n    var classNamePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/\n      .source // based on the java naming conventions\n    var className = {\n      pattern: RegExp(classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n      lookbehind: true,\n      inside: {\n        namespace: {\n          pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        punctuation: /\\./\n      }\n    }\n    Prism.languages.java = Prism.languages.extend('clike', {\n      string: {\n        pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n        lookbehind: true,\n        greedy: true\n      },\n      'class-name': [\n        className,\n        {\n          // variables and parameters\n          // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n          pattern: RegExp(\n            classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source\n          ),\n          lookbehind: true,\n          inside: className.inside\n        }\n      ],\n      keyword: keywords,\n      function: [\n        Prism.languages.clike.function,\n        {\n          pattern: /(::\\s*)[a-z_]\\w*/,\n          lookbehind: true\n        }\n      ],\n      number:\n        /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n      operator: {\n        pattern:\n          /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('java', 'string', {\n      'triple-quoted-string': {\n        // http://openjdk.java.net/jeps/355#Description\n        pattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n        greedy: true,\n        alias: 'string'\n      },\n      char: {\n        pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){1,6}'/,\n        greedy: true\n      }\n    })\n    Prism.languages.insertBefore('java', 'class-name', {\n      annotation: {\n        pattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      generics: {\n        pattern:\n          /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      },\n      namespace: {\n        pattern: RegExp(\n          /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/.source.replace(\n            /<keyword>/g,\n            function () {\n              return keywords.source\n            }\n          )\n        ),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorJava = require('./java.js')\nvar refractorJavadoclike = require('./javadoclike.js')\nmodule.exports = javadoc\njavadoc.displayName = 'javadoc'\njavadoc.aliases = []\nfunction javadoc(Prism) {\n  Prism.register(refractorJava)\n  Prism.register(refractorJavadoclike)\n  ;(function (Prism) {\n    var codeLinePattern = /(^(?:[\\t ]*(?:\\*\\s*)*))[^*\\s].*$/m\n    var memberReference = /#\\s*\\w+(?:\\s*\\([^()]*\\))?/.source\n    var reference =\n      /(?:\\b[a-zA-Z]\\w+\\s*\\.\\s*)*\\b[A-Z]\\w*(?:\\s*<mem>)?|<mem>/.source.replace(\n        /<mem>/g,\n        function () {\n          return memberReference\n        }\n      )\n    Prism.languages.javadoc = Prism.languages.extend('javadoclike', {})\n    Prism.languages.insertBefore('javadoc', 'keyword', {\n      reference: {\n        pattern: RegExp(\n          /(@(?:exception|link|linkplain|see|throws|value)\\s+(?:\\*\\s*)?)/\n            .source +\n            '(?:' +\n            reference +\n            ')'\n        ),\n        lookbehind: true,\n        inside: {\n          function: {\n            pattern: /(#\\s*)\\w+(?=\\s*\\()/,\n            lookbehind: true\n          },\n          field: {\n            pattern: /(#\\s*)\\w+/,\n            lookbehind: true\n          },\n          namespace: {\n            pattern: /\\b(?:[a-z]\\w*\\s*\\.\\s*)+/,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          'class-name': /\\b[A-Z]\\w*/,\n          keyword: Prism.languages.java.keyword,\n          punctuation: /[#()[\\],.]/\n        }\n      },\n      'class-name': {\n        // @param <T> the first generic type parameter\n        pattern: /(@param\\s+)<[A-Z]\\w*>/,\n        lookbehind: true,\n        inside: {\n          punctuation: /[.<>]/\n        }\n      },\n      'code-section': [\n        {\n          pattern:\n            /(\\{@code\\s+(?!\\s))(?:[^\\s{}]|\\s+(?![\\s}])|\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\})+(?=\\s*\\})/,\n          lookbehind: true,\n          inside: {\n            code: {\n              // there can't be any HTML inside of {@code} tags\n              pattern: codeLinePattern,\n              lookbehind: true,\n              inside: Prism.languages.java,\n              alias: 'language-java'\n            }\n          }\n        },\n        {\n          pattern:\n            /(<(code|pre|tt)>(?!<code>)\\s*)\\S(?:\\S|\\s+\\S)*?(?=\\s*<\\/\\2>)/,\n          lookbehind: true,\n          inside: {\n            line: {\n              pattern: codeLinePattern,\n              lookbehind: true,\n              inside: {\n                // highlight HTML tags and entities\n                tag: Prism.languages.markup.tag,\n                entity: Prism.languages.markup.entity,\n                code: {\n                  // everything else is Java code\n                  pattern: /.+/,\n                  inside: Prism.languages.java,\n                  alias: 'language-java'\n                }\n              }\n            }\n          }\n        }\n      ],\n      tag: Prism.languages.markup.tag,\n      entity: Prism.languages.markup.entity\n    })\n    Prism.languages.javadoclike.addSupport('java', Prism.languages.javadoc)\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern:\n          /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n"],"names":["module","java","Prism","keywords","classNamePrefix","className","refractorJava","refractorJavadoclike","javadoc","codeLinePattern","memberReference","reference","javadoclike","javaDocLike","docCommentSupport","lang","callback","tokenName","grammar","token","definition","i","l","addSupport","languages","docLanguage","pattern"],"sourceRoot":""}