{"version":3,"file":"react-syntax-highlighter_languages_refractor_tt2-f566b85bc432b001d684.bundle.js","mappings":"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","sources":["webpack://ardos-web/./node_modules/refractor/lang/markup-templating.js","webpack://ardos-web/./node_modules/refractor/lang/tt2.js"],"sourcesContent":["'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            ) {\n              ++i\n            } // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = tt2\ntt2.displayName = 'tt2'\ntt2.aliases = []\nfunction tt2(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.tt2 = Prism.languages.extend('clike', {\n      comment: /#.*|\\[%#[\\s\\S]*?%\\]/,\n      keyword:\n        /\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|SWITCH|TAGS|THROW|TRY|UNLESS|USE|WHILE|WRAPPER)\\b/,\n      punctuation: /[[\\]{},()]/\n    })\n    Prism.languages.insertBefore('tt2', 'number', {\n      operator: /=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|not|or)\\b/,\n      variable: {\n        pattern: /\\b[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*\\b/i\n      }\n    })\n    Prism.languages.insertBefore('tt2', 'keyword', {\n      delimiter: {\n        pattern: /^(?:\\[%|%%)-?|-?%\\]$/,\n        alias: 'punctuation'\n      }\n    })\n    Prism.languages.insertBefore('tt2', 'string', {\n      'single-quoted-string': {\n        pattern: /'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,\n        greedy: true,\n        alias: 'string'\n      },\n      'double-quoted-string': {\n        pattern: /\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          variable: {\n            pattern: /\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i\n          }\n        }\n      }\n    }) // The different types of TT2 strings \"replace\" the C-like standard string\n    delete Prism.languages.tt2.string\n    Prism.hooks.add('before-tokenize', function (env) {\n      var tt2Pattern = /\\[%[\\s\\S]+?%\\]/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'tt2',\n        tt2Pattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'tt2')\n    })\n  })(Prism)\n}\n"],"names":["module","markupTemplating","Prism","getPlaceholder","language","index","env","placeholderPattern","replaceFilter","tokenStack","match","i","placeholder","j","keys","walkTokens","tokens","token","k","t","s","before","middle","after","replacement","refractorMarkupTemplating","tt2","tt2Pattern"],"sourceRoot":""}