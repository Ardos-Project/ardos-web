{"version":3,"file":"react-syntax-highlighter_languages_refractor_etlua-d48b8d9134266d4e9762.bundle.js","mappings":"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","sources":["webpack://ardos-web/./node_modules/refractor/lang/etlua.js","webpack://ardos-web/./node_modules/refractor/lang/lua.js","webpack://ardos-web/./node_modules/refractor/lang/markup-templating.js"],"sourcesContent":["'use strict'\nvar refractorLua = require('./lua.js')\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = etlua\netlua.displayName = 'etlua'\netlua.aliases = []\nfunction etlua(Prism) {\n  Prism.register(refractorLua)\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.etlua = {\n      delimiter: {\n        pattern: /^<%[-=]?|-?%>$/,\n        alias: 'punctuation'\n      },\n      'language-lua': {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages.lua\n      }\n    }\n    Prism.hooks.add('before-tokenize', function (env) {\n      var pattern = /<%[\\s\\S]+?%>/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'etlua',\n        pattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'etlua')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = lua\nlua.displayName = 'lua'\nlua.aliases = []\nfunction lua(Prism) {\n  Prism.languages.lua = {\n    comment: /^#!.+|--(?:\\[(=*)\\[[\\s\\S]*?\\]\\1\\]|.*)/m,\n    // \\z may be used to skip the following space\n    string: {\n      pattern:\n        /([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[^z]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]/,\n      greedy: true\n    },\n    number:\n      /\\b0x[a-f\\d]+(?:\\.[a-f\\d]*)?(?:p[+-]?\\d+)?\\b|\\b\\d+(?:\\.\\B|(?:\\.\\d*)?(?:e[+-]?\\d+)?\\b)|\\B\\.\\d+(?:e[+-]?\\d+)?\\b/i,\n    keyword:\n      /\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/,\n    function: /(?!\\d)\\w+(?=\\s*(?:[({]))/,\n    operator: [\n      /[-+*%^&|#]|\\/\\/?|<[<=]?|>[>=]?|[=~]=?/,\n      {\n        // Match \"..\" but don't break \"...\"\n        pattern: /(^|[^.])\\.\\.(?!\\.)/,\n        lookbehind: true\n      }\n    ],\n    punctuation: /[\\[\\](){},;]|\\.+|:+/\n  }\n}\n","'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            ) {\n              ++i\n            } // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n"],"names":["refractorLua","refractorMarkupTemplating","module","etlua","Prism","env","pattern","lua","markupTemplating","getPlaceholder","language","index","placeholderPattern","replaceFilter","tokenStack","match","placeholder","j","keys","walkTokens","tokens","token","k","t","s","before","middle","after","replacement"],"sourceRoot":""}