{"version":3,"file":"react-syntax-highlighter_languages_refractor_kumir-1fdc110ccad7bdae217b.bundle.js","mappings":"sGAEAA,EAAO,QAAUC,EACjBA,EAAM,YAAc,QACpBA,EAAM,QAAU,CAAC,KAAK,EACtB,SAASA,EAAMC,EAAO,EAElB,SAAUA,EAAO,CAMjB,IAAIC,EAAQ,sDAAsD,OAQlE,SAASC,EAAOC,EAASC,EAAO,CAC9B,OAAO,OAAOD,EAAQ,QAAQ,WAAYF,CAAK,EAAGG,CAAK,CACzD,CACAJ,EAAM,UAAU,MAAQ,CACtB,QAAS,CACP,QAAS,MACX,EACA,OAAQ,CACN,QAAS,MACT,OAAQ,EACV,EACA,OAAQ,CACN,QAAS,0BACT,OAAQ,EACV,EACA,QAAS,CACP,QAASE,EAAO,yCAAyC,MAAM,EAC/D,WAAY,EACd,EACA,gBAAiB,CACf,QAASA,EAAO,2CAA2C,MAAM,EACjE,WAAY,GACZ,MAAO,SACT,EACA,kBAAmB,CACjB,QAASA,EAAO,mCAAmC,MAAM,EACzD,WAAY,GACZ,MAAO,SACT,EACA,KAAM,CACJ,CACE,QAASA,EACP,mEACG,MACL,EACA,WAAY,GACZ,MAAO,SACT,EACA,CACE,QAASA,EACP,0DAA0D,MAC5D,EACA,WAAY,GACZ,MAAO,WACT,CACF,EAMA,QAAS,CACP,QAASA,EACP,qPACG,MACL,EACA,WAAY,EACd,EAEA,KAAM,CAEJ,QAASA,EACP,2EACG,MACL,EACA,WAAY,EACd,EAEA,OAAQ,CACN,QAASA,EACP,2FACG,OACH,GACF,EACA,WAAY,EACd,EAEA,YAAa,iBAMb,gBAAiB,CACf,QAAS,0BACT,MAAO,UACT,CACF,EACAF,EAAM,UAAU,IAAMA,EAAM,UAAU,KACxC,GAAGA,CAAK,CACV,C","sources":["webpack://ardos-web/./node_modules/refractor/lang/kumir.js"],"sourcesContent":["'use strict'\n\nmodule.exports = kumir\nkumir.displayName = 'kumir'\nkumir.aliases = ['kum']\nfunction kumir(Prism) {\n  /* eslint-disable regexp/no-dupe-characters-character-class */\n  ;(function (Prism) {\n    /**\n     * Regular expression for characters that are not allowed in identifiers.\n     *\n     * @type {string}\n     */\n    var nonId = /\\s\\x00-\\x1f\\x22-\\x2f\\x3a-\\x3f\\x5b-\\x5e\\x60\\x7b-\\x7e/.source\n    /**\n     * Surround a regular expression for IDs with patterns for non-ID sequences.\n     *\n     * @param {string} pattern A regular expression for identifiers.\n     * @param {string} [flags] The regular expression flags.\n     * @returns {RegExp} A wrapped regular expression for identifiers.\n     */\n    function wrapId(pattern, flags) {\n      return RegExp(pattern.replace(/<nonId>/g, nonId), flags)\n    }\n    Prism.languages.kumir = {\n      comment: {\n        pattern: /\\|.*/\n      },\n      prolog: {\n        pattern: /#.*/,\n        greedy: true\n      },\n      string: {\n        pattern: /\"[^\\n\\r\"]*\"|'[^\\n\\r']*'/,\n        greedy: true\n      },\n      boolean: {\n        pattern: wrapId(/(^|[<nonId>])(?:да|нет)(?=[<nonId>]|$)/.source),\n        lookbehind: true\n      },\n      'operator-word': {\n        pattern: wrapId(/(^|[<nonId>])(?:и|или|не)(?=[<nonId>]|$)/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'system-variable': {\n        pattern: wrapId(/(^|[<nonId>])знач(?=[<nonId>]|$)/.source),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      type: [\n        {\n          pattern: wrapId(\n            /(^|[<nonId>])(?:вещ|лит|лог|сим|цел)(?:\\x20*таб)?(?=[<nonId>]|$)/\n              .source\n          ),\n          lookbehind: true,\n          alias: 'builtin'\n        },\n        {\n          pattern: wrapId(\n            /(^|[<nonId>])(?:компл|сканкод|файл|цвет)(?=[<nonId>]|$)/.source\n          ),\n          lookbehind: true,\n          alias: 'important'\n        }\n      ],\n      /**\n       * Should be performed after searching for type names because of \"таб\".\n       * \"таб\" is a reserved word, but never used without a preceding type name.\n       * \"НАЗНАЧИТЬ\", \"Фввод\", and \"Фвывод\" are not reserved words.\n       */\n      keyword: {\n        pattern: wrapId(\n          /(^|[<nonId>])(?:алг|арг(?:\\x20*рез)?|ввод|ВКЛЮЧИТЬ|вс[её]|выбор|вывод|выход|дано|для|до|дс|если|иначе|исп|использовать|кон(?:(?:\\x20+|_)исп)?|кц(?:(?:\\x20+|_)при)?|надо|нач|нс|нц|от|пауза|пока|при|раза?|рез|стоп|таб|то|утв|шаг)(?=[<nonId>]|$)/\n            .source\n        ),\n        lookbehind: true\n      },\n      /** Should be performed after searching for reserved words. */\n      name: {\n        // eslint-disable-next-line regexp/no-super-linear-backtracking\n        pattern: wrapId(\n          /(^|[<nonId>])[^\\d<nonId>][^<nonId>]*(?:\\x20+[^<nonId>]+)*(?=[<nonId>]|$)/\n            .source\n        ),\n        lookbehind: true\n      },\n      /** Should be performed after searching for names. */\n      number: {\n        pattern: wrapId(\n          /(^|[<nonId>])(?:\\B\\$[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?=[<nonId>]|$)/\n            .source,\n          'i'\n        ),\n        lookbehind: true\n      },\n      /** Should be performed after searching for words. */\n      punctuation: /:=|[(),:;\\[\\]]/,\n      /**\n       * Should be performed after searching for\n       * - numeric constants (because of \"+\" and \"-\");\n       * - punctuation marks (because of \":=\" and \"=\").\n       */\n      'operator-char': {\n        pattern: /\\*\\*?|<[=>]?|>=?|[-+/=]/,\n        alias: 'operator'\n      }\n    }\n    Prism.languages.kum = Prism.languages.kumir\n  })(Prism)\n}\n"],"names":["module","kumir","Prism","nonId","wrapId","pattern","flags"],"sourceRoot":""}