{"version":3,"file":"react-syntax-highlighter_languages_refractor_soy-3c9fc9a59e06f39eceb0.bundle.js","mappings":"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","sources":["webpack://ardos-web/./node_modules/refractor/lang/markup-templating.js","webpack://ardos-web/./node_modules/refractor/lang/soy.js"],"sourcesContent":["'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            ) {\n              ++i\n            } // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = soy\nsoy.displayName = 'soy'\nsoy.aliases = []\nfunction soy(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    var stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/\n    var numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/\n    Prism.languages.soy = {\n      comment: [\n        /\\/\\*[\\s\\S]*?\\*\\//,\n        {\n          pattern: /(\\s)\\/\\/.*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      'command-arg': {\n        pattern:\n          /(\\{+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      parameter: {\n        pattern: /(\\{+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      keyword: [\n        {\n          pattern:\n            /(\\{+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n          lookbehind: true\n        },\n        /\\b(?:any|as|attributes|bool|css|float|html|in|int|js|list|map|null|number|string|uri)\\b/\n      ],\n      delimiter: {\n        pattern: /^\\{+\\/?|\\/?\\}+$/,\n        alias: 'punctuation'\n      },\n      property: /\\w+(?==)/,\n      variable: {\n        pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+\\]))*/,\n        inside: {\n          string: {\n            pattern: stringPattern,\n            greedy: true\n          },\n          number: numberPattern,\n          punctuation: /[\\[\\].?]/\n        }\n      },\n      string: {\n        pattern: stringPattern,\n        greedy: true\n      },\n      function: [\n        /\\w+(?=\\()/,\n        {\n          pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n          lookbehind: true\n        }\n      ],\n      boolean: /\\b(?:false|true)\\b/,\n      number: numberPattern,\n      operator: /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n      punctuation: /[{}()\\[\\]|.,:]/\n    } // Tokenize all inline Soy expressions\n    Prism.hooks.add('before-tokenize', function (env) {\n      var soyPattern = /\\{\\{.+?\\}\\}|\\{.+?\\}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g\n      var soyLitteralStart = '{literal}'\n      var soyLitteralEnd = '{/literal}'\n      var soyLitteralMode = false\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'soy',\n        soyPattern,\n        function (match) {\n          // Soy tags inside {literal} block are ignored\n          if (match === soyLitteralEnd) {\n            soyLitteralMode = false\n          }\n          if (!soyLitteralMode) {\n            if (match === soyLitteralStart) {\n              soyLitteralMode = true\n            }\n            return true\n          }\n          return false\n        }\n      )\n    }) // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy')\n    })\n  })(Prism)\n}\n"],"names":["module","markupTemplating","Prism","getPlaceholder","language","index","env","placeholderPattern","replaceFilter","tokenStack","match","i","placeholder","j","keys","walkTokens","tokens","token","k","t","s","before","middle","after","replacement","refractorMarkupTemplating","soy","stringPattern","numberPattern","soyPattern","soyLitteralStart","soyLitteralEnd","soyLitteralMode"],"sourceRoot":""}