{"version":3,"file":"react-syntax-highlighter_languages_refractor_ftl-a165ca3a0ab856a2725e.bundle.js","mappings":"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","sources":["webpack://ardos-web/./node_modules/refractor/lang/ftl.js","webpack://ardos-web/./node_modules/refractor/lang/markup-templating.js"],"sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = ftl\nftl.displayName = 'ftl'\nftl.aliases = []\nfunction ftl(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    // https://freemarker.apache.org/docs/dgui_template_exp.html\n    // FTL expression with 4 levels of nesting supported\n    var FTL_EXPR =\n      /[^<()\"']|\\((?:<expr>)*\\)|<(?!#--)|<#--(?:[^-]|-(?!->))*-->|\"(?:[^\\\\\"]|\\\\.)*\"|'(?:[^\\\\']|\\\\.)*'/\n        .source\n    for (var i = 0; i < 2; i++) {\n      FTL_EXPR = FTL_EXPR.replace(/<expr>/g, function () {\n        return FTL_EXPR\n      })\n    }\n    FTL_EXPR = FTL_EXPR.replace(/<expr>/g, /[^\\s\\S]/.source)\n    var ftl = {\n      comment: /<#--[\\s\\S]*?-->/,\n      string: [\n        {\n          // raw string\n          pattern: /\\br(\"|')(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n          greedy: true\n        },\n        {\n          pattern: RegExp(\n            /(\"|')(?:(?!\\1|\\$\\{)[^\\\\]|\\\\.|\\$\\{(?:(?!\\})(?:<expr>))*\\})*\\1/.source.replace(\n              /<expr>/g,\n              function () {\n                return FTL_EXPR\n              }\n            )\n          ),\n          greedy: true,\n          inside: {\n            interpolation: {\n              pattern: RegExp(\n                /((?:^|[^\\\\])(?:\\\\\\\\)*)\\$\\{(?:(?!\\})(?:<expr>))*\\}/.source.replace(\n                  /<expr>/g,\n                  function () {\n                    return FTL_EXPR\n                  }\n                )\n              ),\n              lookbehind: true,\n              inside: {\n                'interpolation-punctuation': {\n                  pattern: /^\\$\\{|\\}$/,\n                  alias: 'punctuation'\n                },\n                rest: null\n              }\n            }\n          }\n        }\n      ],\n      keyword: /\\b(?:as)\\b/,\n      boolean: /\\b(?:false|true)\\b/,\n      'builtin-function': {\n        pattern: /((?:^|[^?])\\?\\s*)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      function: /\\b\\w+(?=\\s*\\()/,\n      number: /\\b\\d+(?:\\.\\d+)?\\b/,\n      operator:\n        /\\.\\.[<*!]?|->|--|\\+\\+|&&|\\|\\||\\?{1,2}|[-+*/%!=<>]=?|\\b(?:gt|gte|lt|lte)\\b/,\n      punctuation: /[,;.:()[\\]{}]/\n    }\n    ftl.string[1].inside.interpolation.inside.rest = ftl\n    Prism.languages.ftl = {\n      'ftl-comment': {\n        // the pattern is shortened to be more efficient\n        pattern: /^<#--[\\s\\S]*/,\n        alias: 'comment'\n      },\n      'ftl-directive': {\n        pattern: /^<[\\s\\S]+>$/,\n        inside: {\n          directive: {\n            pattern: /(^<\\/?)[#@][a-z]\\w*/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          punctuation: /^<\\/?|\\/?>$/,\n          content: {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            alias: 'ftl',\n            inside: ftl\n          }\n        }\n      },\n      'ftl-interpolation': {\n        pattern: /^\\$\\{[\\s\\S]*\\}$/,\n        inside: {\n          punctuation: /^\\$\\{|\\}$/,\n          content: {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            alias: 'ftl',\n            inside: ftl\n          }\n        }\n      }\n    }\n    Prism.hooks.add('before-tokenize', function (env) {\n      // eslint-disable-next-line regexp/no-useless-lazy\n      var pattern = RegExp(\n        /<#--[\\s\\S]*?-->|<\\/?[#@][a-zA-Z](?:<expr>)*?>|\\$\\{(?:<expr>)*?\\}/.source.replace(\n          /<expr>/g,\n          function () {\n            return FTL_EXPR\n          }\n        ),\n        'gi'\n      )\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'ftl',\n        pattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'ftl')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            ) {\n              ++i\n            } // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n"],"names":["refractorMarkupTemplating","module","ftl","Prism","FTL_EXPR","i","env","pattern","markupTemplating","getPlaceholder","language","index","placeholderPattern","replaceFilter","tokenStack","match","placeholder","j","keys","walkTokens","tokens","token","t","s","before","middle","after","replacement"],"sourceRoot":""}